(()=>{var c="cache-v5",i="https://api.github.com/repos/Artik-Man/artik.me/commits",h=[location.origin,"https://fonts.gstatic.com","https://fonts.googleapis.com"];function a(e){return e[0]?.sha}async function r(){try{let e=await fetch(i,{cache:"no-store"});if(!e.ok)throw new Error(`Failed to fetch version: ${e.statusText}`);let t=await e.json();return a(t)}catch(e){return console.error("[SW]: Error fetching version:",e),null}}async function l(e,t){await(await caches.open(c)).put(e,t)}self.addEventListener("install",e=>{console.log("[SW]: Install"),self.skipWaiting(),e.waitUntil(r().then(t=>{console.log("[SW]: Fetched version during install:",t)}))});self.addEventListener("activate",e=>{console.log("[SW]: Activate"),e.waitUntil(caches.keys().then(t=>Promise.all(t.map(o=>{if(o!==c)return console.log("[SW]: Deleting old cache:",o),caches.delete(o)})))),self.clients.claim()});self.addEventListener("message",e=>{e.data&&e.data.type==="CHECK_VERSION"&&(console.log("[SW]: Received CHECK_VERSION message"),u())});async function u(){let e=await caches.open(c),t=await r(),o=await e.match(i).then(n=>n?.json().then(s=>a(s)));if(t&&o&&t===o)console.log("[SW]: Version matches. No update needed.");else{console.log("[SW]: Version mismatch. Updating cache and notifying clients.");try{let n=await fetch(i);n.ok&&await l(i,n.clone()),d()}catch(n){console.error("[SW]: Error updating version:",n)}}}function d(){self.clients.matchAll({includeUncontrolled:!0,type:"window"}).then(e=>{e.forEach(t=>{t.postMessage({type:"VERSION_OUTDATED"})})})}self.addEventListener("fetch",e=>{e.respondWith((async()=>{let t=new URL(e.request.url);if(h.includes(t.origin)){let n=await(await caches.open(c)).match(e.request);if(n)return console.log("[SW]: Serving from cache:",e.request.url),n;{console.log("[SW]: Fetching and updating cache:",e.request.url);let s=await fetch(e.request);return s.ok&&await l(e.request,s.clone()),s}}else return fetch(e.request)})())});})();
